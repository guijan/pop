#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct Nameval Nameval;
struct Nameval {
	char *name;
	int value;
	Nameval *next;
};

/* newitem: create new item from name and value
 *
 * Returns NULL on error.
 */
Nameval *
newitem(char *name, int value)
{
	Nameval *newp;

	if ((newp = malloc(sizeof(*newp))) == NULL)
		return (NULL);
	newp->name = name;
	newp->value = value;
	newp->next = NULL;
	return (newp);
}

/* addfront: add newp to listp
 *
 * Returns the first element of the list.
 * Note: A NULL pointer is returned if a NULL newp is added to a NULL listp.
 */
Nameval *
addfront(Nameval *listp, Nameval *newp)
{
	return (listp == NULL ? newp : (listp->next = newp));
}

/* addend: add newp to the end of listp */
Nameval *
addend(Nameval *listp, Nameval *newp)
{
	Nameval *p;

	if (listp == NULL)
		return (newp);

	for (p = listp; p->next != NULL; p = p->next)
		;
	p->next = newp;
	return (listp);
}

/* lookup: sequential search for name in listp */
Nameval *
lookup(Nameval *listp, char *name)
{
	for (; listp != NULL; listp = listp->next)
		if (strcmp(name, listp->name) == 0)
			return (listp);
	return (NULL);
}

/* apply: execute fn for each element of listp */
void
apply(Nameval *listp,
    void (*fn)(Nameval *, void *), void *arg)
{
	for (; listp != NULL; listp = listp ->next)
		(*fn)(listp, arg);
}

/* printnv: print name and value using format in arg */
void
printnv(Nameval *p, void *arg)
{
	char *fmt;

	fmt = arg;
	printf(fmt, p->name, p->value);
}

/* inccounter: increment counter *arg */
void
inccounter(Nameval *p, void *arg)
{
	int *ip;

	/* p is unused */
	ip = arg;
	(*ip)++;
}

/* freeall: free all elements of listp */
void
freeall(Nameval *listp)
{
	Nameval *next;

	for (; listp != NULL; listp = next) {
		next = listp->next;
		/* assumes name is freed elsewhere */
		free(listp);
	}
}

/* delitem: delete first "name" from listp */
Nameval *delitem(Nameval *listp, char *name)
{
	Nameval *p, *prev;

	prev = NULL;
	for (p = listp; p != NULL; p = p->next) {
		if (strcmp(name, p->name) == 0) {
			if (prev == NULL)
				listp = p->next;
			else
				prev->next = p->next;
			free(p);
			return (listp);
		}
		prev = p;
	}
	printf("delitem: %s not in list", name);
	return (NULL);	/* can't get here */
}
